

;; emacs -q -l ~/.emacs_alone


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(require 'package)

(setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/") 
			 ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))


;; activate all the packages
(package-initialize)

;; fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))


;; ### for package install  not test
(setq package-list '(better-defaults spacemacs-theme evil dumb-jump
				     company python-mode neotree
				     flycheck markdown-mode flymd elpy undo-tree helm which-key use-package
				     js2-mode xref-js2 company-tern;; js
				     session ;; for start up 

				     ;;    ein ;; jupyter-notebook for python
				     ))

					; install the missing packages
(dolist (package package-list) 
  (unless (package-installed-p package) 
    (package-install package)))



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-file-name-transforms (quote ((".*" "~/.emacs.d/autosaves/\\1" t))))
 '(backup-directory-alist (quote ((".*" . "~/.emacs.d/backups/"))))
 '(custom-safe-themes
   (quote
    ("bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "a24c5b3c12d147da6cef80938dca1223b7c7f70f2f382b26308eba014dc4833a" "274fa62b00d732d093fc3f120aca1b31a6bb484492f31081c1814a858e25c72e" "b571f92c9bfaf4a28cb64ae4b4cdbda95241cd62cf07d942be44dc8f46c491f4" default)))
 '(package-selected-packages
   (quote
    (realgud spacemacs-theme dracula-theme elisp-format helm molokai-theme dumb-jump evil auto-complete-c-headers auto-complete python-mode neotree flycheck material-theme better-defaults undo-tree)))
 '(spacemacs-theme-custom-colors (quote ((base . "#ffffff"))))
 '(tool-bar-mode nil))

;; not show tool bar
;; emms not used default
;; using theme "molokai"


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )







;; ### startup
(setq inhibit-startup-message t) ;; hide the startup message
(load-theme 'spacemacs-dark t)		 ;; load material theme, using
(global-linum-mode t)		 ;; enable line numbers globally

(global-visual-line-mode t)  ;; not break a word

(fset 'yes-or-no-p 'y-or-n-p)  ;; change yes-or-no to y-or-n

(save-place-mode 1)  ;; restore file position after re-openning files

;;(require 'session) 
;;(add-hook 'after-init-hook 'session-initialize) 

;; (toggle-frame-maximized) ;; startup maximize



;; ### setting the font

;; default font setting
;;(set-frame-font "Microsoft Yahei 10" nil t)

(add-to-list 'default-frame-alist '(font . "Droid Sans Mono-11" ))
(set-face-attribute 'default t 
		    :font "Droid Sans Mono-11" )


;;;中文与英文字体设置
;; 字体不等宽时会带慢光标的移动速度
;; 前面是设置英文字体（Lucida Console)，后面设置中文字体(microsoft yahei)
;; Auto generated by cnfonts
;; <https://github.com/tumashu/cnfonts>

;; (set-face-attribute 'default nil 
;; 		    :font (font-spec :name
;; 				     "-outline-Lucida Console-normal-normal-normal-mono-*-*-*-*-c-*-iso10646-1" 
;; 				     :weight 'normal 
;; 				     :slant 'normal 
;; 				     :size 10.0))
;; (dolist (charset '(kana han symbol cjk-misc bopomofo)) 
;;   (set-fontset-font (frame-parameter nil 'font) charset (font-spec :name
;; 								   "-outline-microsoft yahei-bold-normal-normal-sans-*-*-*-*-p-*-iso10646-1" 
;; 								   :weight 'normal 
;; 								   :slant 'normal 
;; 								   :size 10.5)))

(setq-default line-spacing 0.3)


;; ### backup file and autosave file

;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.


;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)





;; ### evil for vim edit
(add-to-list 'load-path "~/.emacs.d/evil")
(require 'evil)
(evil-mode 1)

;; Use j/k to move one visual line insted of gj/gk
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)


;; remove all keybindings from insert-state keymap, use emacs-state when editing
(setcdr evil-insert-state-map nil)
;; ESC to switch back normal-state
(define-key evil-insert-state-map [escape] 'evil-normal-state)

;; TAB to indent in normal-state
(define-key evil-normal-state-map (kbd "TAB") 'indent-for-tab-command)

;;	(define-key evil-insert-state-map (kbd "jk") 'evil-normal-state)
;;	(define-key evil-insert-state-map (kbd "jj") 'insert-jay)
;;
;;	(define-key help-mode-map (kbd "i") 'evil-emacs-state)


;; ### for markdown
;; #### markdown-mode
;; download the markdown.pl to "~/.emacs.d/markdown-mode" first
;; add load-path for markdown-mode
(add-to-list 'load-path "~/.emacs.d/markdown-mode")
;; set autoload and ".md" file assosiation
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
(setq auto-mode-alist (cons '(".md" . markdown-mode) auto-mode-alist))

;; #### for markdown fly render
(require 'flymd)

;; ### pandoc for org and markdown file convert to pdf
;; markdown convert may failed for too many level in TOC generated by
;; markdown-toc-generate
(defun pandoc-export-to-pdf()
  "convert org or markdown file to pdf by pandoc"
  (interactive)
  ;;(message "test")
  ;;(message (buffer-file-name))
  ;; pandoc --pdf-engine=xelatex -V CJKmainfont=KaiTi test.md -o test1.pdf
  (setq file-ext (file-name-extension (buffer-file-name) ))
  (if (or (string-equal file-ext "org") (string-equal file-ext "md"))
    (progn
      (setq pandoc-str (concatenate 'string
				    "pandoc --pdf-engine=xelatex "
				    ;;"-V CJKmainfont=SimSong "
				    ;;"-V geometry:\"top=2cm, bottom=1.5cm, left=1cm, right=1cm\" "
				    "-o "
				    (file-name-base (buffer-file-name))
				    ".pdf "
				    (buffer-file-name)))
      (message pandoc-str)
      (shell-command pandoc-str))
    (message "Convert Finished")
    (message "file type is not org or md")
    )
  )

;; #### markdown code block highlight
(setq markdown-fontify-code-blocks-natively t)


;; ### for org-mode and org-ref

;; #### run code
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))

;; #### org-ref
(require 'org-ref)
(setq bibtex-completion-bibliography
      '("mybib.bib"))

;; will export a random label and cause wrong if not set
(setq org-latex-prefer-user-labels t)

(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -interaction nonstopmode -output-directory %o %f"
	"pdflatex -interaction nonstopmode -output-directory %o %f"))



(defun pandoc-export-to-docx()
  "convert org or markdown file to doc by pandoc"
  (interactive)
  ;;(message "test")
  ;;(message (buffer-file-name))
  ;; pandoc --pdf-engine=xelatex -V CJKmainfont=KaiTi test.md -o test1.pdf
  (setq file-ext (file-name-extension (buffer-file-name) ))
  (if (or (string-equal file-ext "org") (string-equal file-ext "md"))
    (progn
      (setq pandoc-str (concatenate 'string
				    "pandoc --bibliography=mybib.bib --filter pandoc-citeproc "
				    "-V geometry:\"top=2cm, bottom=1.5cm, left=1cm, right=1cm\" -o "
				    (file-name-base (buffer-file-name))
				    ".docx "
				    (buffer-file-name)))
      (message pandoc-str)
      (shell-command pandoc-str))
    (message "Convert Finished")
    (message "file type is not org or md")
    )
  )




;; ### for python
;; the plugin: elpy  flycheck
;; M-n/p for auto-complete candiate chosen 

;; #### elpy for python
(elpy-enable)

(when 
    (require 'flycheck nil t) 
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)) 
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;;(elpy-use-ipython) depressed
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")

(setq elpy-rpc-python-command "python3")

;; #### realgud for debug

;; `load-library realgud` 
;; `realgud:ipdb` start debugger

;; Command 	Action
;; n, F10 	Next (aka “step over”, “step through”)
;; s, SPC, F11 	Step (aka “step into”)
;; f, S-F11 	Finish (aka “step out”, “return”)
;; c, F5 	Continue (run to next break point)
;; 
;; Using breakpoints
;; Command 	Action
;; b, F9 	Set breakpoint mouse2
;; D 	Clear breakpoint mouse2 (by number)
;; 
;; Inspecting variables
;; Command 	Action
;; mouse-2 (middle button) 	Inspect variable under cursor (in tooltip) mouse2
;; e 	Evaluate expression
;; 
;; Control commands
;; Command 	Action
;; q, S-F5 	Quit
;; R, r 	Run (aka “restart”)
;; S 	Go to command window


;; ### c++

(add-hook 'after-init-hook 'global-company-mode)

;; ### javascript
 ;; (require 'js2-mode)
 ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
 ;; 
 ;; ;; Better imenu
 ;; (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
 ;; 
 ;; (require 'xref-js2)
 ;; (add-hook 'js2-mode-hook (lambda ()
 ;;   (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
 ;; 
 ;; (require 'company)
 ;; (require 'company-tern)
 ;; 
 ;; (add-to-list 'company-backends 'company-tern)
 ;; (add-hook 'js2-mode-hook (lambda ()
 ;;                            (tern-mode)
 ;;                            (company-mode)))
 ;; 
 ;; ;; Disable completion keybindings, as we use xref-js2 instead
 ;; (define-key tern-mode-keymap (kbd "M-.") nil)
 ;; (define-key tern-mode-keymap (kbd "M-,") nil)
 ;; 

;; ### emms for music play
;;(setq exec-path (append exec-path '("G:/Program Files (x86) portable/Anki")))
;;(require 'emms-setup)
;;(require 'emms-player-mplayer)
;;(emms-standard)
;;(emms-default-players)
;;(define-emms-simple-player mplayer '(file url)
;;      (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
;;                    ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
;;                    ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
;;      "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")
;;(setq emms-source-file-default-directory "D:/Users/fly/Music")


;; ### neotree  (long time no use..)
 ;; (require 'neotree)
 ;; (global-set-key [f8] 'neotree-toggle)


;; ### coding system setting
(prefer-coding-system 'utf-8)
(setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
(set-language-environment 'utf-8)
(set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(unless (eq system-type 'windows-nt) 
  (set-selection-coding-system 'utf-8))


;; ### browse-file-directory
(defun browse-file-directory () 
  "Open the current file's directory however the OS would." 
  (interactive) 
  (if default-directory (browse-url-of-file (expand-file-name default-directory)) 
    (error 
     "No `default-directory' to open")))

;; ### for code jump
;; depandent on ag( The Silver Searcher )
;; (dump-jump-mode)


;; ### helm
(define-key evil-normal-state-map (kbd "M-x") 'helm-M-x)
(define-key evil-insert-state-map (kbd "M-x") 'helm-M-x)

;; ### show shortcut 
(require 'which-key)
(which-key-mode)
;;(use-package which-key :ensure t)
  

;;(recentf-mode)
;; ### spacemacs like keybinding

(define-key evil-normal-state-map (kbd "SPC SPC") 'helm-M-x)

;; file
(define-key evil-normal-state-map (kbd "SPC f f") 'helm-find-files)
(define-key evil-normal-state-map (kbd "SPC f r") 'helm-recentf)

;; window
(define-key evil-normal-state-map (kbd "SPC w /") 'split-window-right)
(define-key evil-normal-state-map (kbd "SPC w -") 'split-window-below)
(define-key evil-normal-state-map (kbd "SPC w k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "SPC w j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "SPC w h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "SPC w l") 'evil-window-right)
(define-key evil-normal-state-map (kbd "SPC w d") 'evil-window-delete)
(define-key evil-normal-state-map (kbd "SPC w o") 'delete-other-windows)

;; buffer
(define-key evil-normal-state-map (kbd "SPC b d") 'evil-delete-buffer)
(define-key evil-normal-state-map (kbd "SPC b n") 'next-buffer)
(define-key evil-normal-state-map (kbd "SPC b p") 'previous-buffer)
(define-key evil-normal-state-map (kbd "SPC b l") 'helm-buffers-list)
(define-key evil-normal-state-map (kbd "SPC TAB") 'evil-switch-to-windows-last-buffer)

;; org-mode
(define-key evil-normal-state-map (kbd "SPC m t") 'org-todo)
